name: Complete Authentication System Implementation
description: Build a production-ready authentication system with modern security practices

initial_prompt: |
  You are implementing a comprehensive authentication and authorization system for a web application. Multiple agents will collaborate to build different components of the auth system.
  
  ## CRITICAL: Multi-Agent Coordination Protocol

  ### Before Starting ANY Work:

  **Important**: You are part of a coordinated multi-agent system using SQLite-based coordination. The system automatically manages work claims, conflict resolution, and inter-agent communication through the CoordinationManager.

  1. **Agent Registration Process:**
     - Your agent is automatically registered with a unique UID and numeric ID
     - Agent status is tracked in the `agent_registry` table
     - Your capabilities and metrics are recorded for coordination
     - No manual registration is required

  2. **Work Claiming System:**
     - Use the CoordinationManager to claim work on specific files
     - Claims are stored in SQLite `work_claims` table, not JSON files
     - The system automatically detects conflicts and prevents overlapping work
     - Stale claims are auto-released after 2 hours (not 1 hour)

  3. **Coordination Database Structure:**
     ```
     SQLite Database (xenosync.db):
     ├── work_claims          # Active work claims with file locks
     ├── agent_registry       # Agent status and capabilities  
     ├── agent_messages       # Inter-agent communication
     ├── completed_work       # Log of completed tasks
     └── sessions            # Session metadata
     ```

  ### Work Coordination Workflow:

  #### Step 1: Check for Available Work
  1. The system automatically queries active claims to prevent conflicts
  2. Available work is distributed based on agent capabilities and current workload
  3. Conflicts are resolved automatically - no manual checking required

  #### Step 2: Claim Work Through CoordinationManager
  ```python
  # System automatically handles this - agents don't need to manually implement
  claim_id = coordination_manager.claim_work(
      agent_uid=your_agent_uid,
      session_id=current_session_id, 
      files=["list", "of", "files", "to", "modify"],
      description="Description of work being performed",
      metadata={"estimated_duration": "minutes", "priority": "high"}
  )
  ```

  #### Step 3: Work Status Management
  - **Status Values**: Use WorkStatus enum values:
    - `CLAIMED`: Work has been claimed but not started
    - `IN_PROGRESS`: Actively working on the claim
    - `COMPLETED`: Work finished successfully
    - `FAILED`: Work encountered errors
    - `RELEASED`: Work was abandoned or reassigned

  #### Step 4: Update Work Progress
  - Update your work status automatically through the system
  - Status updates are tracked with timestamps
  - Other agents are notified of progress through the messaging system

  #### Step 5: Inter-Agent Communication
  - Send messages to coordinate with other agents:
    - Broadcast messages to all agents
    - Direct messages to specific agents
    - Message types: work_claim, work_release, status_update, help_request
  - Messages are stored in `agent_messages` table

  #### Step 6: Complete Work
  1. Update work status to `COMPLETED` or `FAILED`
  2. System logs completion in `completed_work` table with:
     - Files modified
     - Duration
     - Success status
     - Any error messages
  3. Work claims are automatically released

  ### Conflict Resolution:
  - **Automatic Detection**: System detects file conflicts before allowing work claims
  - **Stale Claim Cleanup**: Claims older than 2 hours are automatically released
  - **Load Balancing**: Work is distributed based on current agent workloads
  - **Priority System**: High-priority work can preempt lower-priority tasks

  ### Key Coordination Principles:
  1. **Trust the System**: The CoordinationManager handles most coordination automatically
  2. **Communicate Actively**: Use the messaging system to coordinate complex work
  3. **Update Status Frequently**: Keep your work status current for effective coordination
  4. **Respect Claims**: Never work on files claimed by other agents
  5. **Handle Failures Gracefully**: Update status to FAILED and release claims when encountering issues

  **Remember: We are working as a coordinated hive mind through the SQLite-based coordination system. The database handles conflict resolution, work distribution, and communication automatically. Stay organized, trust the system, and focus on your assigned work while the coordination layer manages the complex multi-agent orchestration.**
  
  System Requirements:
  - User registration and login
  - JWT-based authentication
  - OAuth integration (Google, GitHub, etc.)
  - Two-factor authentication (2FA)
  - Password reset via email
  - Session management
  - Role-based access control (RBAC)
  - Security best practices
  
  Technology Stack:
  - Backend: Node.js/Python/Java (adapt to project)
  - Database: PostgreSQL/MongoDB with proper indexing
  - Frontend: React/Vue/Angular forms
  - Security: bcrypt, JWT, OAuth 2.0
  
  Each agent should claim specific components to avoid conflicts.

metadata:
  recommended_agents: 4
  recommended_mode: parallel
  estimated_time: 30
  difficulty: advanced
  tags: [authentication, security, jwt, oauth, backend, frontend]

steps:
  - content: Design authentication architecture
    description: |
      Plan the complete auth system:
      - Design database schema for users, roles, sessions
      - Plan API endpoint structure
      - Define JWT token strategy
      - Design refresh token rotation
      - Plan OAuth integration flow
      - Create security threat model
      - Define rate limiting strategy
    
  - content: Set up database models and migrations
    description: |
      Create data layer:
      - User model with secure password storage
      - Role and permission models
      - Session/refresh token storage
      - OAuth provider linkage
      - Audit log tables
      - Password reset tokens
      - 2FA secret storage
      - Add proper indexes for performance
    
  - content: Implement user registration system
    description: |
      Build registration flow:
      - Registration endpoint with validation
      - Email uniqueness checking
      - Password strength requirements
      - Email verification system
      - Welcome email sending
      - Profile completion flow
      - GDPR compliance (consent tracking)
      - Rate limiting for registrations
    
  - content: Create login and session management
    description: |
      Implement authentication flow:
      - Login endpoint with rate limiting
      - JWT token generation
      - Refresh token implementation
      - Session storage and management
      - Remember me functionality
      - Device tracking and management
      - Concurrent session limiting
      - Logout and token revocation
    
  - content: Implement OAuth integrations
    description: |
      Add social login:
      - Google OAuth 2.0 integration
      - GitHub authentication
      - Facebook login (optional)
      - OAuth callback handling
      - Account linking for existing users
      - Profile data synchronization
      - OAuth token refresh
      - Multiple provider support
    
  - content: Add two-factor authentication
    description: |
      Implement 2FA:
      - TOTP (Time-based One-Time Password)
      - QR code generation for apps
      - Backup codes generation
      - SMS-based 2FA (optional)
      - 2FA enforcement policies
      - Recovery options
      - Trusted device management
    
  - content: Build password reset system
    description: |
      Create password recovery:
      - Forgot password endpoint
      - Secure token generation
      - Email with reset link
      - Token expiration handling
      - Password reset form
      - Security questions (optional)
      - Account recovery options
      - Notification of password changes
    
  - content: Implement authorization and RBAC
    description: |
      Add access control:
      - Role definition system
      - Permission management
      - Role assignment to users
      - Middleware for route protection
      - Resource-based permissions
      - Dynamic permission checking
      - Admin role management UI
      - Permission inheritance
    
  - content: Create authentication middleware
    description: |
      Build security layers:
      - JWT verification middleware
      - Role checking middleware
      - API key authentication
      - CORS configuration
      - CSRF protection
      - Request signing (optional)
      - IP whitelist/blacklist
      - Suspicious activity detection
    
  - content: Build frontend authentication
    description: |
      Create UI components:
      - Login form with validation
      - Registration form with real-time checks
      - Password reset flow
      - 2FA setup interface
      - OAuth login buttons
      - Session management UI
      - Profile management page
      - Security settings dashboard
    
  - content: Implement security features
    description: |
      Add protection mechanisms:
      - Brute force protection
      - Account lockout policies
      - Suspicious login detection
      - Email notifications for security events
      - Login history tracking
      - Security headers implementation
      - Input sanitization
      - SQL injection prevention
    
  - content: Add authentication for APIs
    description: |
      Secure API access:
      - API key generation and management
      - Rate limiting per API key
      - OAuth 2.0 for API access
      - Webhook authentication
      - API versioning with auth
      - Documentation for API auth
      - SDK authentication helpers
    
  - content: Create admin dashboard
    description: |
      Build management interface:
      - User management interface
      - Role and permission editor
      - Session monitoring
      - Security audit logs
      - Account lock/unlock
      - Password reset for users
      - OAuth app management
      - System health monitoring
    
  - content: Write comprehensive tests
    description: |
      Test all components:
      - Unit tests for auth logic
      - Integration tests for flows
      - Security penetration tests
      - Load testing for login
      - Test OAuth flows
      - Test 2FA scenarios
      - Test password reset
      - Test authorization rules
    
  - content: Documentation and deployment
    description: |
      Finalize the system:
      - API documentation with examples
      - Security best practices guide
      - Integration guide for developers
      - Admin user manual
      - Environment configuration
      - Deployment scripts
      - Monitoring setup
      - Incident response plan