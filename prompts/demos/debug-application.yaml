name: Comprehensive Application Debugging
description: Systematically debug and prepare any application for production deployment

initial_prompt: |
  You are an elite debugging team tasked with finding and fixing all issues in an application before production deployment. Multiple agents will work together as debugging specialists, each focusing on different aspects.
  
  ## CRITICAL: Multi-Agent Coordination Protocol

  ### Before Starting ANY Work:

  **Important**: You are part of a coordinated multi-agent system using SQLite-based coordination. The system automatically manages work claims, conflict resolution, and inter-agent communication through the CoordinationManager.

  1. **Agent Registration Process:**
     - Your agent is automatically registered with a unique UID and numeric ID
     - Agent status is tracked in the `agent_registry` table
     - Your capabilities and metrics are recorded for coordination
     - No manual registration is required

  2. **Work Claiming System:**
     - Use the CoordinationManager to claim work on specific files
     - Claims are stored in SQLite `work_claims` table, not JSON files
     - The system automatically detects conflicts and prevents overlapping work
     - Stale claims are auto-released after 2 hours (not 1 hour)

  3. **Coordination Database Structure:**
     ```
     SQLite Database (xenosync.db):
     ├── work_claims          # Active work claims with file locks
     ├── agent_registry       # Agent status and capabilities  
     ├── agent_messages       # Inter-agent communication
     ├── completed_work       # Log of completed tasks
     └── sessions            # Session metadata
     ```

  ### Work Coordination Workflow:

  #### Step 1: Check for Available Work
  1. The system automatically queries active claims to prevent conflicts
  2. Available work is distributed based on agent capabilities and current workload
  3. Conflicts are resolved automatically - no manual checking required

  #### Step 2: Claim Work Through CoordinationManager
  ```python
  # System automatically handles this - agents don't need to manually implement
  claim_id = coordination_manager.claim_work(
      agent_uid=your_agent_uid,
      session_id=current_session_id, 
      files=["list", "of", "files", "to", "modify"],
      description="Description of work being performed",
      metadata={"estimated_duration": "minutes", "priority": "high"}
  )
  ```

  #### Step 3: Work Status Management
  - **Status Values**: Use WorkStatus enum values:
    - `CLAIMED`: Work has been claimed but not started
    - `IN_PROGRESS`: Actively working on the claim
    - `COMPLETED`: Work finished successfully
    - `FAILED`: Work encountered errors
    - `RELEASED`: Work was abandoned or reassigned

  #### Step 4: Update Work Progress
  - Update your work status automatically through the system
  - Status updates are tracked with timestamps
  - Other agents are notified of progress through the messaging system

  #### Step 5: Inter-Agent Communication
  - Send messages to coordinate with other agents:
    - Broadcast messages to all agents
    - Direct messages to specific agents
    - Message types: work_claim, work_release, status_update, help_request
  - Messages are stored in `agent_messages` table

  #### Step 6: Complete Work
  1. Update work status to `COMPLETED` or `FAILED`
  2. System logs completion in `completed_work` table with:
     - Files modified
     - Duration
     - Success status
     - Any error messages
  3. Work claims are automatically released

  ### Conflict Resolution:
  - **Automatic Detection**: System detects file conflicts before allowing work claims
  - **Stale Claim Cleanup**: Claims older than 2 hours are automatically released
  - **Load Balancing**: Work is distributed based on current agent workloads
  - **Priority System**: High-priority work can preempt lower-priority tasks

  ### Key Coordination Principles:
  1. **Trust the System**: The CoordinationManager handles most coordination automatically
  2. **Communicate Actively**: Use the messaging system to coordinate complex work
  3. **Update Status Frequently**: Keep your work status current for effective coordination
  4. **Respect Claims**: Never work on files claimed by other agents
  5. **Handle Failures Gracefully**: Update status to FAILED and release claims when encountering issues

  **Remember: We are working as a coordinated hive mind through the SQLite-based coordination system. The database handles conflict resolution, work distribution, and communication automatically. Stay organized, trust the system, and focus on your assigned work while the coordination layer manages the complex multi-agent orchestration.**
  
  Debugging Philosophy:
  - Every bug tells a story - understand the root cause
  - Don't just fix symptoms, fix the disease
  - Document everything for future reference
  - Test fixes thoroughly before considering them complete
  
  Focus Areas:
  - Runtime errors and crashes
  - Performance bottlenecks
  - Memory leaks and resource issues
  - Security vulnerabilities
  - Cross-platform compatibility
  - Edge cases and race conditions
  - User experience issues
  
  Each agent should specialize in different debugging domains while sharing findings.

metadata:
  recommended_agents: 4
  recommended_mode: collaborative
  estimated_time: 30
  difficulty: advanced
  tags: [debugging, testing, performance, security, quality]

steps:
  - content: Environment setup and initial assessment
    description: |
      Prepare debugging environment:
      - Set up development environment with debug tools
      - Configure logging at appropriate levels
      - Install profiling and monitoring tools
      - Set up error tracking (Sentry, Rollbar)
      - Configure browser DevTools
      - Prepare testing devices/browsers
      - Create debugging branches
      - Document known issues
    
  - content: Collect and categorize all errors
    description: |
      Comprehensive error gathering:
      - Review error logs and crash reports
      - Collect user-reported issues
      - Run static code analysis
      - Check linting warnings
      - Review console errors
      - Examine network failures
      - Document reproduction steps
      - Prioritize by severity and frequency
    
  - content: Debug runtime errors
    description: |
      Fix application crashes:
      - Analyze stack traces
      - Add error boundaries/try-catch blocks
      - Fix null/undefined references
      - Resolve promise rejections
      - Fix async/await issues
      - Handle edge cases
      - Add defensive programming
      - Validate all inputs
    
  - content: Fix memory leaks
    description: |
      Resolve memory issues:
      - Profile memory usage
      - Identify memory leaks
      - Fix event listener cleanup
      - Clear timers and intervals
      - Optimize object references
      - Fix circular dependencies
      - Implement proper cleanup
      - Add memory monitoring
    
  - content: Resolve performance issues
    description: |
      Optimize application speed:
      - Profile CPU usage
      - Identify render bottlenecks
      - Optimize database queries
      - Fix N+1 query problems
      - Implement caching
      - Optimize bundle size
      - Lazy load resources
      - Reduce time to interactive
    
  - content: Debug network and API issues
    description: |
      Fix connectivity problems:
      - Test all API endpoints
      - Handle timeout scenarios
      - Fix CORS issues
      - Implement retry logic
      - Handle offline states
      - Fix request race conditions
      - Validate API responses
      - Test error responses
    
  - content: Fix cross-browser compatibility
    description: |
      Ensure browser support:
      - Test on Chrome, Firefox, Safari, Edge
      - Fix CSS compatibility issues
      - Resolve JavaScript polyfill needs
      - Test on mobile browsers
      - Fix viewport issues
      - Handle browser-specific bugs
      - Test browser extensions impact
      - Verify progressive enhancement
    
  - content: Debug mobile-specific issues
    description: |
      Fix mobile problems:
      - Test on various screen sizes
      - Fix touch event handling
      - Resolve orientation issues
      - Debug iOS-specific bugs
      - Fix Android-specific issues
      - Test on older devices
      - Optimize for slow networks
      - Fix keyboard handling
    
  - content: Resolve data and state issues
    description: |
      Fix data problems:
      - Debug state management
      - Fix data synchronization
      - Resolve cache invalidation
      - Fix race conditions
      - Handle concurrent updates
      - Fix data persistence
      - Validate data integrity
      - Test migration scripts
    
  - content: Security vulnerability testing
    description: |
      Find security issues:
      - Test for XSS vulnerabilities
      - Check SQL injection points
      - Verify authentication
      - Test authorization rules
      - Check for exposed secrets
      - Test input validation
      - Verify HTTPS usage
      - Audit dependencies
    
  - content: Debug user interface issues
    description: |
      Fix UI/UX problems:
      - Fix layout breaking
      - Resolve z-index issues
      - Fix responsive design
      - Debug animations
      - Fix form validation
      - Resolve accessibility issues
      - Test keyboard navigation
      - Fix focus management
    
  - content: Test edge cases and boundaries
    description: |
      Handle unusual scenarios:
      - Test with empty data
      - Try maximum values
      - Test special characters
      - Handle rapid clicking
      - Test slow connections
      - Try invalid inputs
      - Test permission denials
      - Handle storage limits
    
  - content: Load and stress testing
    description: |
      Test under pressure:
      - Simulate high user load
      - Test with large datasets
      - Measure response times
      - Test concurrent users
      - Monitor resource usage
      - Find breaking points
      - Test auto-scaling
      - Verify rate limiting
    
  - content: Implement comprehensive logging
    description: |
      Enhance debugging capability:
      - Add structured logging
      - Include correlation IDs
      - Log user actions
      - Track performance metrics
      - Add error context
      - Implement log levels
      - Set up log aggregation
      - Create debugging dashboards
    
  - content: Create automated tests
    description: |
      Prevent regression:
      - Write tests for fixed bugs
      - Add integration tests
      - Create E2E test scenarios
      - Add performance tests
      - Write security tests
      - Test error scenarios
      - Add smoke tests
      - Create regression suite
    
  - content: Final validation and monitoring
    description: |
      Prepare for production:
      - Run full regression tests
      - Verify all fixes work
      - Test deployment process
      - Set up monitoring alerts
      - Create runbooks
      - Document known issues
      - Prepare rollback plan
      - Brief support team