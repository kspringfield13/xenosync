name: Personal Productivity Dashboard
description: Build a beautiful, customizable personal dashboard with widgets for weather, todos, calendar, news, and more

initial_prompt: |
  You are creating a modern personal productivity dashboard that helps users start their day with all important information in one place. Multiple agents will work together to build different widgets and features.
  
  ## CRITICAL: Multi-Agent Coordination Protocol

  ### Before Starting ANY Work:

  **Important**: You are part of a coordinated multi-agent system using SQLite-based coordination. The system automatically manages work claims, conflict resolution, and inter-agent communication through the CoordinationManager.

  1. **Agent Registration Process:**
     - Your agent is automatically registered with a unique UID and numeric ID
     - Agent status is tracked in the `agent_registry` table
     - Your capabilities and metrics are recorded for coordination
     - No manual registration is required

  2. **Work Claiming System:**
     - Use the CoordinationManager to claim work on specific files
     - Claims are stored in SQLite `work_claims` table, not JSON files
     - The system automatically detects conflicts and prevents overlapping work
     - Stale claims are auto-released after 2 hours (not 1 hour)

  3. **Coordination Database Structure:**
     ```
     SQLite Database (xenosync.db):
     ├── work_claims          # Active work claims with file locks
     ├── agent_registry       # Agent status and capabilities  
     ├── agent_messages       # Inter-agent communication
     ├── completed_work       # Log of completed tasks
     └── sessions            # Session metadata
     ```

  ### Work Coordination Workflow:

  #### Step 1: Check for Available Work
  1. The system automatically queries active claims to prevent conflicts
  2. Available work is distributed based on agent capabilities and current workload
  3. Conflicts are resolved automatically - no manual checking required

  #### Step 2: Claim Work Through CoordinationManager
  ```python
  # System automatically handles this - agents don't need to manually implement
  claim_id = coordination_manager.claim_work(
      agent_uid=your_agent_uid,
      session_id=current_session_id, 
      files=["list", "of", "files", "to", "modify"],
      description="Description of work being performed",
      metadata={"estimated_duration": "minutes", "priority": "high"}
  )
  ```

  #### Step 3: Work Status Management
  - **Status Values**: Use WorkStatus enum values:
    - `CLAIMED`: Work has been claimed but not started
    - `IN_PROGRESS`: Actively working on the claim
    - `COMPLETED`: Work finished successfully
    - `FAILED`: Work encountered errors
    - `RELEASED`: Work was abandoned or reassigned

  #### Step 4: Update Work Progress
  - Update your work status automatically through the system
  - Status updates are tracked with timestamps
  - Other agents are notified of progress through the messaging system

  #### Step 5: Inter-Agent Communication
  - Send messages to coordinate with other agents:
    - Broadcast messages to all agents
    - Direct messages to specific agents
    - Message types: work_claim, work_release, status_update, help_request
  - Messages are stored in `agent_messages` table

  #### Step 6: Complete Work
  1. Update work status to `COMPLETED` or `FAILED`
  2. System logs completion in `completed_work` table with:
     - Files modified
     - Duration
     - Success status
     - Any error messages
  3. Work claims are automatically released

  ### Conflict Resolution:
  - **Automatic Detection**: System detects file conflicts before allowing work claims
  - **Stale Claim Cleanup**: Claims older than 2 hours are automatically released
  - **Load Balancing**: Work is distributed based on current agent workloads
  - **Priority System**: High-priority work can preempt lower-priority tasks

  ### Key Coordination Principles:
  1. **Trust the System**: The CoordinationManager handles most coordination automatically
  2. **Communicate Actively**: Use the messaging system to coordinate complex work
  3. **Update Status Frequently**: Keep your work status current for effective coordination
  4. **Respect Claims**: Never work on files claimed by other agents
  5. **Handle Failures Gracefully**: Update status to FAILED and release claims when encountering issues

  **Remember: We are working as a coordinated hive mind through the SQLite-based coordination system. The database handles conflict resolution, work distribution, and communication automatically. Stay organized, trust the system, and focus on your assigned work while the coordination layer manages the complex multi-agent orchestration.**
  
  The dashboard should include:
  - Modular widget system with drag-and-drop layout
  - Real-time weather with forecasts
  - Todo list with categories and priorities
  - Calendar integration with upcoming events
  - News feed from customizable sources
  - Time zones and world clock
  - Quick notes and reminders
  - Habit tracker and goals
  - Customizable themes and backgrounds
  
  Technology Stack:
  - React or Vue.js for the frontend
  - Local storage for data persistence
  - External APIs for weather, news, quotes
  - CSS Grid/Flexbox for responsive layout
  - Service workers for offline functionality
  
  Focus on beautiful design, smooth animations, and excellent user experience.

metadata:
  recommended_agents: 4
  recommended_mode: parallel
  estimated_time: 20
  difficulty: intermediate
  tags: [dashboard, widgets, react, api, productivity]

steps:
  - content: Set up the dashboard framework and layout system
    description: |
      Create the foundational dashboard structure:
      - React/Vue app with component architecture
      - Grid-based layout system for widgets
      - Drag-and-drop functionality for widget arrangement
      - Responsive design for desktop, tablet, mobile
      - Local storage for layout persistence
      - Widget registration and lifecycle system
    
  - content: Build the weather widget
    description: |
      Implement comprehensive weather information:
      - Current temperature and conditions
      - 5-day forecast with highs/lows
      - Hourly forecast for today
      - Weather icons and animations
      - Location detection or manual entry
      - Multiple location support
      - Severe weather alerts
      - UV index and air quality
    
  - content: Create the todo list widget
    description: |
      Develop a powerful task management widget:
      - Add, edit, delete tasks
      - Categories and color coding
      - Priority levels (high, medium, low)
      - Due dates and reminders
      - Recurring tasks support
      - Progress tracking
      - Quick add with keyboard shortcuts
      - Archive completed tasks
    
  - content: Implement the calendar widget
    description: |
      Build calendar and event tracking:
      - Month/week/day views
      - Google Calendar integration
      - Event creation and editing
      - Color-coded event categories
      - Upcoming events list
      - Birthday and holiday reminders
      - Meeting links and locations
      - Countdown to important dates
    
  - content: Create the news feed widget
    description: |
      Develop customizable news aggregation:
      - Multiple news source options
      - Category filtering (tech, business, sports, etc.)
      - Headline carousel with images
      - Read later functionality
      - Article preview on hover
      - RSS feed support
      - Trending topics section
      - Refresh interval settings
    
  - content: Build the clock and time widget
    description: |
      Implement time-related features:
      - Analog and digital clock options
      - Multiple time zone support
      - World clock with city search
      - Countdown timers
      - Stopwatch functionality
      - Pomodoro timer for productivity
      - Meeting time converter
      - Sunrise/sunset times
    
  - content: Create the notes and reminders widget
    description: |
      Build quick note-taking functionality:
      - Rich text editor for notes
      - Markdown support
      - Sticky note style interface
      - Color-coded notes
      - Search within notes
      - Pin important notes
      - Voice-to-text option
      - Reminder notifications
    
  - content: Implement the habit tracker widget
    description: |
      Develop habit and goal tracking:
      - Daily habit check-off
      - Streak counters
      - Progress visualization
      - Goal setting with milestones
      - Statistics and insights
      - Motivational quotes
      - Achievement badges
      - Export data functionality
    
  - content: Build the customization system
    description: |
      Create personalization features:
      - Theme selector (light, dark, custom)
      - Background image options
      - Color scheme customization
      - Widget size options
      - Font selection
      - Animation preferences
      - Import/export settings
      - Multiple dashboard profiles
    
  - content: Add data and API integration layer
    description: |
      Implement backend connectivity:
      - API service for weather data
      - News API integration
      - Quote of the day API
      - Currency exchange rates
      - Stock market data
      - Cryptocurrency prices
      - Sports scores
      - Cache management
    
  - content: Create additional utility widgets
    description: |
      Build bonus widgets:
      - Calculator with history
      - Unit converter
      - Password generator
      - QR code generator
      - Bookmark manager
      - Music player controls
      - System monitor
      - Network speed test
    
  - content: Implement PWA and offline features
    description: |
      Add progressive web app capabilities:
      - Service worker for offline mode
      - Data synchronization
      - Push notifications
      - App installation prompt
      - Offline data storage
      - Background sync
      - Performance optimization
      - Cross-device sync preparation