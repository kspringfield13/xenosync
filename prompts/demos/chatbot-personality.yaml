name: Multi-Personality Chatbot Collection
description: Create a collection of themed chatbots with distinct personalities, from Shakespeare to pirates to tech support

initial_prompt: |
  You are building a collection of chatbots, each with a unique personality and speaking style. Multiple agents will collaborate, with each agent developing and refining different bot personalities.
  
  ## CRITICAL: Multi-Agent Coordination Protocol

  ### Before Starting ANY Work:

  **Important**: You are part of a coordinated multi-agent system. Use the `xenosync-coord` CLI tool to interact with the coordination system and avoid conflicts with other agents.

  ### Essential Commands You Must Use:

  #### 1. Check Coordination Status (Always do this first!)
  ```bash
  # See what other agents are doing and current session status
  scripts/xenosync-coord status
  ```

  #### 2. Claim Work Before Starting
  ```bash
  # Claim specific files before modifying them
  scripts/xenosync-coord claim "file1.html,file2.js,css/styles.css" "Implementing game UI and player controls"

  # With priority and time estimate
  scripts/xenosync-coord claim "game.js" "Building ghost AI system" --priority high --estimated-duration 30
  ```

  #### 3. Check Completed Work (Avoid duplication!)
  ```bash
  # See what has already been completed
  scripts/xenosync-coord list-work
  ```

  #### 4. Report Completion (Required!)
  ```bash
  # When you finish work - MUST reference step numbers!
  scripts/xenosync-coord complete "Completed step 1: Game framework and architecture ready" --files "index.html,game.js,styles.css" --duration 1200

  # If work failed
  scripts/xenosync-coord complete "Failed step 3: Player movement system" --failed --error "Collision detection issues"
  ```

  #### 5. Communicate with Team
  ```bash
  # Send messages to coordinate with other agents
  scripts/xenosync-coord send-message all status_update "Starting work on maze generation system"

  # Get messages from other agents
  scripts/xenosync-coord get-messages
  ```

  ### CRITICAL Work Flow:

  1. **Start Each Work Session:**
     ```bash
     # Check what's happening
     scripts/xenosync-coord status
     scripts/xenosync-coord list-work
     
     # Claim your work area  
     scripts/xenosync-coord claim "files,to,modify" "Description with step number"
     ```

  2. **During Work:**
     - Focus on your claimed files only
     - Never modify files claimed by other agents
     - Check messages periodically: `scripts/xenosync-coord get-messages`

  3. **Complete Work:**
     ```bash
     # MUST mention step numbers in completion message!
     scripts/xenosync-coord complete "Completed step X: [Description]" --files "modified,files" --duration seconds
     ```

  ### Coordination Rules:
  - **Always claim before coding** - prevents conflicts
  - **Reference step numbers** in completion messages (e.g., "Completed step 3: Maze generation")
  - **Check status frequently** - see what others are doing
  - **Communicate blockers** - ask for help when stuck
  - **Focus on integration** - ensure components work together

  ### Step-Based Progress Tracking:
  **IMPORTANT**: When completing work, explicitly mention which step(s) you completed:
  - ✅ "Completed step 1: Game framework architecture"
  - ✅ "Finished step 5: Ghost AI implementation" 
  - ✅ "Done with step 8: Audio system integration"
  - ❌ "Fixed some bugs" (too vague)
  - ❌ "Updated files" (no step reference)

  **Remember: We are a coordinated hive mind. Use the coordination tools, respect claims, communicate clearly, and reference step numbers when completing work. The orchestrator tracks progress by matching your completion messages to specific steps.**
  
  The chatbot collection should feature:
  - At least 6 distinct personalities with unique voices
  - Personality-appropriate responses and vocabulary
  - Context awareness and memory
  - Smooth personality switching
  - Educational and entertainment value
  - Web interface for interacting with all bots
  - Personality customization options
  
  Personality Examples:
  - Shakespeare Bot (speaks in iambic pentameter and Elizabethan English)
  - Pirate Bot (nautical terms, "arr" and "ahoy")
  - Zen Master Bot (philosophical, calm, uses koans)
  - Dad Joke Bot (terrible puns and wholesome humor)
  - Tech Support Bot (patient, technical, step-by-step)
  - Motivational Coach Bot (energetic, positive, inspiring)
  
  Technology Stack:
  - Python or Node.js backend
  - Natural Language Processing (NLP)
  - React/Vue frontend with chat interface
  - WebSocket for real-time chat
  - Local storage for conversation history

metadata:
  recommended_agents: 3
  recommended_mode: collaborative
  estimated_time: 25
  difficulty: intermediate
  tags: [chatbot, ai, nlp, personality, entertainment]

steps:
  - content: Set up the chatbot framework
    description: |
      Create the core chatbot infrastructure:
      - Message processing pipeline
      - Personality module system
      - Response generation engine
      - Context and memory management
      - WebSocket server for real-time chat
      - Session handling for multiple users
      - Rate limiting and security measures
    
  - content: Develop the Shakespeare Bot personality
    description: |
      Create a bot that speaks like William Shakespeare:
      - Elizabethan vocabulary database
      - Iambic pentameter generator
      - Shakespearean insults and compliments
      - Quote integration from actual plays
      - "Thou", "thee", "thy" pronoun usage
      - Poetic metaphors and similes
      - Dramatic responses to questions
      - Soliloquy mode for deep thoughts
    
  - content: Build the Pirate Bot personality
    description: |
      Develop a swashbuckling pirate character:
      - Nautical terminology database
      - Pirate slang and expressions
      - Treasure and adventure references
      - Sea shanty lyrics integration
      - Ship and sailing metaphors
      - Rum and plunder jokes
      - "Arr", "ahoy", "matey" interjections
      - Pirate code of conduct references
    
  - content: Create the Zen Master Bot personality
    description: |
      Build a wise and philosophical bot:
      - Zen koan database
      - Meditation and mindfulness advice
      - Buddhist philosophy integration
      - Calm and measured responses
      - Nature metaphors and imagery
      - Paradoxical wisdom
      - Breathing exercise guidance
      - Haiku generation for special moments
    
  - content: Implement the Dad Joke Bot personality
    description: |
      Develop the ultimate dad joke machine:
      - Extensive pun database
      - Setup and punchline timing
      - Groan-worthy wordplay
      - Clean, family-friendly humor
      - "Hi hungry, I'm Dad" responses
      - Knock-knock joke collection
      - One-liners and zingers
      - Proud reactions to groans
    
  - content: Build the Tech Support Bot personality
    description: |
      Create a helpful technical assistant:
      - Technical troubleshooting scripts
      - Step-by-step instruction generation
      - "Have you tried turning it off and on?"
      - Patient and understanding tone
      - Technical jargon explanation
      - Common problem solutions
      - Remote assistance simulation
      - Ticket number generation for fun
    
  - content: Develop the Motivational Coach Bot personality
    description: |
      Build an inspiring life coach:
      - Motivational quote database
      - Goal-setting frameworks
      - Positive affirmations
      - Energy and enthusiasm in responses
      - Success story references
      - "You got this!" encouragement
      - Achievement celebration mode
      - Personalized pep talks
    
  - content: Create the personality switching system
    description: |
      Implement smooth transitions between bots:
      - Quick personality switching commands
      - Personality introduction messages
      - Smooth handoff between personalities
      - Mixed personality mode for fun
      - Personality strength slider
      - Random personality option
      - Personality combination experiments
    
  - content: Build the web chat interface
    description: |
      Create an engaging user interface:
      - Modern chat UI with bubbles
      - Personality selector with avatars
      - Typing indicators for each bot
      - Message history with search
      - Emoji and reaction support
      - Voice input option
      - Dark/light theme toggle
      - Mobile-responsive design
    
  - content: Implement conversation features
    description: |
      Add advanced chat capabilities:
      - Context awareness across messages
      - Conversation memory and callbacks
      - Multi-turn dialogue support
      - Topic detection and routing
      - Sentiment analysis for responses
      - Language detection
      - Conversation export options
      - Favorite message bookmarking
    
  - content: Add personality customization
    description: |
      Allow users to create custom personalities:
      - Personality trait sliders
      - Custom vocabulary lists
      - Response style selection
      - Combine existing personalities
      - Save custom personalities
      - Share personalities with others
      - Import/export personality configs
      - Community personality gallery
    
  - content: Create interactive features and games
    description: |
      Add entertainment elements:
      - Personality guessing game
      - Bot debate mode
      - Story collaboration between bots
      - Trivia with personality-themed questions
      - Role-playing scenarios
      - Bot theater performances
      - Personality translation challenges
      - Easter eggs and hidden features