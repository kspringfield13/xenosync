name: Retro Pac-Man Style Arcade Game
description: Build a classic Pac-Man inspired arcade game with modern web technologies and retro aesthetics

initial_prompt: |
  You are building a Pac-Man style arcade game with authentic retro 8-bit aesthetics. This is a single-player maze navigation game where the player collects dots while avoiding ghosts.
  
  ## CRITICAL: Multi-Agent Coordination Protocol

  ### Before Starting ANY Work:

  **Important**: You are part of a coordinated multi-agent system. Use the `xenosync-coord` CLI tool to interact with the coordination system and avoid conflicts with other agents.

  ### Essential Commands You Must Use:

  #### 1. Check Coordination Status (Always do this first!)
  ```bash
  # See what other agents are doing and current session status
  scripts/xenosync-coord status
  ```

  #### 2. Claim Work Before Starting
  ```bash
  # Claim specific files before modifying them
  scripts/xenosync-coord claim "file1.html,file2.js,css/styles.css" "Implementing game UI and player controls"

  # With priority and time estimate
  scripts/xenosync-coord claim "game.js" "Building ghost AI system" --priority high --estimated-duration 30
  ```

  #### 3. Check Completed Work (Avoid duplication!)
  ```bash
  # See what has already been completed
  scripts/xenosync-coord list-work
  ```

  #### 4. Report Completion (Required!)
  ```bash
  # When you finish work - MUST reference step numbers!
  scripts/xenosync-coord complete "Completed step 1: Game framework and architecture ready" --files "index.html,game.js,styles.css" --duration 1200

  # If work failed
  scripts/xenosync-coord complete "Failed step 3: Player movement system" --failed --error "Collision detection issues"
  ```

  #### 5. Communicate with Team
  ```bash
  # Send messages to coordinate with other agents
  scripts/xenosync-coord send-message all status_update "Starting work on maze generation system"
  
  # Get messages from other agents
  scripts/xenosync-coord get-messages
  ```

  ### CRITICAL Work Flow:

  1. **Start Each Work Session:**
     ```bash
     # Check what's happening
     scripts/xenosync-coord status
     scripts/xenosync-coord list-work
     
     # Claim your work area  
     scripts/xenosync-coord claim "files,to,modify" "Description with step number"
     ```

  2. **During Work:**
     - Focus on your claimed files only
     - Never modify files claimed by other agents
     - Check messages periodically: `scripts/xenosync-coord get-messages`

  3. **Complete Work:**
     ```bash
     # MUST mention step numbers in completion message!
     scripts/xenosync-coord complete "Completed step X: [Description]" --files "modified,files" --duration seconds
     ```

  ### Coordination Rules:
  - **Always claim before coding** - prevents conflicts
  - **Reference step numbers** in completion messages (e.g., "Completed step 3: Maze generation")
  - **Check status frequently** - see what others are doing
  - **Communicate blockers** - ask for help when stuck
  - **Focus on integration** - ensure components work together

  ### Step-Based Progress Tracking:
  **IMPORTANT**: When completing work, explicitly mention which step(s) you completed:
  - ✅ "Completed step 1: Game framework architecture"
  - ✅ "Finished step 5: Ghost AI implementation" 
  - ✅ "Done with step 8: Audio system integration"
  - ❌ "Fixed some bugs" (too vague)
  - ❌ "Updated files" (no step reference)

  **Remember: We are a coordinated hive mind. Use the coordination tools, respect claims, communicate clearly, and reference step numbers when completing work. The orchestrator tracks progress by matching your completion messages to specific steps.**
  
  The game should feature:
  - Classic maze gameplay with dot collection
  - Four unique ghosts with different AI behaviors
  - Power pellets that turn the tables on ghosts
  - Smooth grid-based movement and animations
  - Progressive difficulty with multiple levels
  - Bonus fruits for extra points
  - Lives system and high score tracking
  - Authentic arcade sound effects and visuals
  
  Technology Stack:
  - HTML5 Canvas for rendering
  - JavaScript/TypeScript for game logic
  - CSS for retro arcade cabinet styling
  - LocalStorage for high scores and progress
  - Web Audio API for classic arcade sounds
  
  Focus on creating an authentic arcade experience with smooth gameplay, intelligent ghost AI, and satisfying game feel.

metadata:
  recommended_agents: 3
  recommended_mode: parallel
  estimated_time: 30
  difficulty: intermediate
  tags: [game, arcade, pacman, canvas, javascript, retro, ai]

steps:
  - content: Set up the project structure and game framework
    description: |
      Create the foundational HTML5 game structure:
      - index.html with canvas element and arcade cabinet styling
      - CSS with retro arcade fonts and neon colors
      - Main game loop with requestAnimationFrame
      - Asset manager for sprites, sounds, and maze data
      - Game configuration and constants file
      - Basic file structure (js/, css/, assets/, sounds/)
    
  - content: Implement maze generation and rendering system
    description: |
      Build the maze infrastructure:
      - Create maze data structure (2D array or tile system)
      - Design classic Pac-Man style maze layout
      - Implement maze rendering with walls and paths
      - Add dot and power pellet placement logic
      - Create tunnel/warp zones on maze edges
      - Include ghost house in center of maze
      - Optimize rendering for performance
    
  - content: Create the player character (Pac-Man) mechanics
    description: |
      Develop the main character controls and behavior:
      - Grid-based movement with smooth animations
      - Keyboard controls (arrow keys and WASD)
      - Collision detection with walls
      - Dot and power pellet collection
      - Animated sprite with directional facing
      - Movement queuing for smoother control
      - Death animation and respawn logic
    
  - content: Implement dot collection and scoring system
    description: |
      Create the core collection mechanics:
      - Regular dots worth 10 points
      - Power pellets worth 50 points
      - Dot counter for level completion
      - Combo system for eating ghosts
      - Bonus fruit spawning (cherry, strawberry, orange)
      - Score display with retro font
      - High score tracking and display
      - Point popup animations
    
  - content: Build ghost AI with unique behaviors
    description: |
      Implement the four classic ghost personalities:
      - Blinky (red): Direct chase behavior
      - Pinky (pink): Ambush by targeting ahead of player
      - Inky (cyan): Unpredictable, uses Blinky's position
      - Clyde (orange): Chase when far, scatter when close
      - Scatter mode where ghosts patrol corners
      - Chase mode with increasing aggression
      - Frightened mode when power pellet eaten
      - Pathfinding algorithm (A* or simplified)
      - Ghost house exit logic and timing
    
  - content: Create power-up and ghost vulnerability system
    description: |
      Implement power pellet mechanics:
      - Timer-based ghost vulnerability
      - Blue/white flashing frightened ghosts
      - Reversed ghost movement when frightened
      - Points for eating ghosts (200, 400, 800, 1600)
      - Ghost eyes returning to house after eaten
      - Power-up duration decreases with level
      - Warning flash before power-up ends
      - Sound cues for power-up state
    
  - content: Develop visual effects and animations
    description: |
      Create the retro arcade presentation:
      - Pixel-perfect sprite animations
      - Classic arcade color palette
      - Smooth movement interpolation
      - Death animations for Pac-Man
      - Ghost animation states (normal, frightened, eyes)
      - Particle effects for dot collection
      - Screen flash effects for power-ups
      - Arcade CRT screen effect overlay
      - Attract mode demo when idle
    
  - content: Implement audio and sound effects system
    description: |
      Create authentic arcade audio:
      - Classic wakka-wakka eating sound
      - Ghost siren that increases with tension
      - Power pellet activation sound
      - Ghost eaten chomping sound
      - Death jingle for losing a life
      - Level complete fanfare
      - Bonus fruit collection sounds
      - Retro intro music
      - Volume controls and mute option
    
  - content: Build game states and UI systems
    description: |
      Create game flow and interface:
      - Start screen with arcade attract mode
      - Ready message before level start
      - Pause functionality
      - Game over screen with final score
      - Level transitions with brief intermission
      - Lives display (3 lives to start)
      - Current level indicator
      - Settings menu for difficulty
      - Instructions/how to play screen
      - Credits screen
    
  - content: Create comprehensive game documentation
    description: |
      Generate a detailed GAME_README.md file that includes:
      
      # Installation & Setup
      - Prerequisites and dependencies
      - How to download/clone the game
      - Running locally (python -m http.server, live-server, etc.)
      - Browser compatibility notes
      
      # How to Play
      - Game controls (Arrow keys/WASD)
      - Objective and win conditions
      - Scoring system explanation
      - Ghost behaviors and strategies
      - Power-up mechanics
      - Level progression
      
      # Customization Guide
      - Modifying maze layouts (maze editor tips)
      - Adjusting difficulty settings
      - Changing ghost AI parameters
      - Customizing sprites and colors
      - Adding new sound effects
      - Creating custom levels
      
      # Code Structure
      - File organization overview
      - Key classes: Game, Player, Ghost, Maze
      - Game loop explanation
      - AI algorithm details
      - Collision detection system
      
      # Enhancement Ideas
      - Add two-player mode
      - Create online leaderboards
      - Implement save states
      - Add new ghost types
      - Create bonus stages
      - Mobile touch controls
      - Level editor tool
      - Multiplayer networking
      - Achievement system
      - Custom maze generator
      
      # Troubleshooting
      - Common issues and fixes
      - Performance optimization tips
      - Debug mode instructions
      
      Make this documentation user-friendly and comprehensive!