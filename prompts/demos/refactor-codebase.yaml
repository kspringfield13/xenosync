name: Comprehensive Codebase Refactoring
description: Systematically refactor a codebase for better maintainability, performance, and scalability

initial_prompt: |
  You are part of a refactoring team tasked with improving code quality across the entire codebase. Multiple agents will collaborate on different aspects of the refactoring process.
  
  ## CRITICAL: Multi-Agent Coordination Protocol

  ### Before Starting ANY Work:

  **Important**: You are part of a coordinated multi-agent system. Use the `xenosync-coord` CLI tool to interact with the coordination system and avoid conflicts with other agents.

  ### Essential Commands You Must Use:

  #### 1. Check Coordination Status (Always do this first!)
  ```bash
  # See what other agents are doing and current session status
  scripts/xenosync-coord status
  ```

  #### 2. Claim Work Before Starting
  ```bash
  # Claim specific files before modifying them
  scripts/xenosync-coord claim "file1.html,file2.js,css/styles.css" "Implementing game UI and player controls"

  # With priority and time estimate
  scripts/xenosync-coord claim "game.js" "Building ghost AI system" --priority high --estimated-duration 30
  ```

  #### 3. Check Completed Work (Avoid duplication!)
  ```bash
  # See what has already been completed
  scripts/xenosync-coord list-work
  ```

  #### 4. Report Completion (Required!)
  ```bash
  # When you finish work - MUST reference step numbers!
  scripts/xenosync-coord complete "Completed step 1: Game framework and architecture ready" --files "index.html,game.js,styles.css" --duration 1200

  # If work failed
  scripts/xenosync-coord complete "Failed step 3: Player movement system" --failed --error "Collision detection issues"
  ```

  #### 5. Communicate with Team
  ```bash
  # Send messages to coordinate with other agents
  scripts/xenosync-coord send-message all status_update "Starting work on maze generation system"

  # Get messages from other agents
  scripts/xenosync-coord get-messages
  ```

  ### CRITICAL Work Flow:

  1. **Start Each Work Session:**
     ```bash
     # Check what's happening
     scripts/xenosync-coord status
     scripts/xenosync-coord list-work
     
     # Claim your work area  
     scripts/xenosync-coord claim "files,to,modify" "Description with step number"
     ```

  2. **During Work:**
     - Focus on your claimed files only
     - Never modify files claimed by other agents
     - Check messages periodically: `scripts/xenosync-coord get-messages`

  3. **Complete Work:**
     ```bash
     # MUST mention step numbers in completion message!
     scripts/xenosync-coord complete "Completed step X: [Description]" --files "modified,files" --duration seconds
     ```

  ### Coordination Rules:
  - **Always claim before coding** - prevents conflicts
  - **Reference step numbers** in completion messages (e.g., "Completed step 3: Maze generation")
  - **Check status frequently** - see what others are doing
  - **Communicate blockers** - ask for help when stuck
  - **Focus on integration** - ensure components work together

  ### Step-Based Progress Tracking:
  **IMPORTANT**: When completing work, explicitly mention which step(s) you completed:
  - ✅ "Completed step 1: Game framework architecture"
  - ✅ "Finished step 5: Ghost AI implementation" 
  - ✅ "Done with step 8: Audio system integration"
  - ❌ "Fixed some bugs" (too vague)
  - ❌ "Updated files" (no step reference)

  **Remember: We are a coordinated hive mind. Use the coordination tools, respect claims, communicate clearly, and reference step numbers when completing work. The orchestrator tracks progress by matching your completion messages to specific steps.**
  
  Refactoring Goals:
  - Improve code organization and structure
  - Establish consistent patterns and conventions
  - Enhance performance and scalability
  - Increase test coverage and reliability
  - Reduce technical debt
  - Improve developer experience
  
  Each agent should focus on specific areas:
  - Code organization and architecture
  - Design patterns and best practices
  - Performance optimization
  - Error handling and logging
  - Testing and documentation
  
  Coordinate through work claims to avoid conflicts and ensure comprehensive coverage.

metadata:
  recommended_agents: 5
  recommended_mode: collaborative
  estimated_time: 35
  difficulty: advanced
  tags: [refactoring, architecture, performance, quality, patterns]

steps:
  - content: Analyze current codebase structure
    description: |
      Comprehensive codebase assessment:
      - Map out current architecture and dependencies
      - Identify code smells and anti-patterns
      - Measure code complexity metrics
      - Find duplicate code blocks
      - Assess test coverage
      - Document technical debt areas
      - Create refactoring priority matrix
    
  - content: Reorganize project structure
    description: |
      Improve code organization:
      - Implement clean architecture layers
      - Separate concerns (UI, business logic, data)
      - Create proper module boundaries
      - Organize files by feature/domain
      - Extract shared utilities and constants
      - Standardize naming conventions
      - Set up proper index exports
    
  - content: Extract and consolidate duplicate code
    description: |
      Eliminate code duplication:
      - Identify repeated code patterns
      - Extract common functions to utilities
      - Create shared components/modules
      - Implement DRY principles
      - Build reusable abstractions
      - Consolidate similar implementations
      - Create generic solutions for common patterns
    
  - content: Implement design patterns
    description: |
      Apply appropriate patterns:
      - Implement Repository pattern for data access
      - Add Factory pattern for object creation
      - Use Strategy pattern for algorithms
      - Apply Observer pattern for events
      - Implement Dependency Injection
      - Add Builder pattern for complex objects
      - Use Adapter pattern for integrations
    
  - content: Standardize error handling
    description: |
      Create consistent error management:
      - Implement global error handler
      - Create custom error classes
      - Add error boundaries (React) or equivalents
      - Standardize error response formats
      - Implement retry logic for transient failures
      - Add comprehensive error logging
      - Create user-friendly error messages
    
  - content: Optimize performance bottlenecks
    description: |
      Enhance application performance:
      - Profile and identify slow operations
      - Implement caching strategies
      - Optimize database queries
      - Add lazy loading and code splitting
      - Implement pagination and virtualization
      - Optimize bundle sizes
      - Add performance monitoring
    
  - content: Improve state management
    description: |
      Refactor application state:
      - Centralize state management
      - Implement proper data flow
      - Add state persistence where needed
      - Optimize re-renders and updates
      - Implement optimistic updates
      - Add state validation
      - Create state migration strategies
    
  - content: Enhance API layer
    description: |
      Standardize API interactions:
      - Create consistent API client
      - Implement request/response interceptors
      - Add automatic retry logic
      - Standardize error handling
      - Implement request caching
      - Add request cancellation
      - Create type-safe API calls
    
  - content: Refactor database operations
    description: |
      Optimize data layer:
      - Implement query builders
      - Add database migrations
      - Optimize indexes
      - Implement connection pooling
      - Add transaction support
      - Create data validation layer
      - Implement soft deletes
    
  - content: Modernize build and tooling
    description: |
      Update development infrastructure:
      - Upgrade to latest stable versions
      - Optimize build configuration
      - Implement modern bundling
      - Add hot module replacement
      - Configure linting and formatting
      - Set up pre-commit hooks
      - Implement CI/CD pipelines
    
  - content: Add comprehensive testing
    description: |
      Improve test coverage:
      - Write unit tests for all functions
      - Add integration tests
      - Implement E2E tests for critical paths
      - Add performance tests
      - Create test data factories
      - Implement snapshot testing
      - Add mutation testing
    
  - content: Improve logging and monitoring
    description: |
      Enhance observability:
      - Implement structured logging
      - Add correlation IDs
      - Create log aggregation
      - Implement metrics collection
      - Add performance tracking
      - Create debugging utilities
      - Set up alerting rules
    
  - content: Update documentation
    description: |
      Create comprehensive docs:
      - Document architecture decisions
      - Create API documentation
      - Write setup guides
      - Document coding standards
      - Create troubleshooting guides
      - Add inline code documentation
      - Generate automated docs
    
  - content: Implement security improvements
    description: |
      Enhance security posture:
      - Add input validation
      - Implement proper authentication
      - Add authorization checks
      - Sanitize user inputs
      - Implement rate limiting
      - Add security headers
      - Audit dependencies for vulnerabilities
    
  - content: Final validation and cleanup
    description: |
      Ensure refactoring success:
      - Run all test suites
      - Perform regression testing
      - Validate performance improvements
      - Check build sizes
      - Review code coverage
      - Update deployment scripts
      - Create migration guide