name: Modern Frontend Dashboard Development
description: Build a comprehensive, data-rich dashboard with real-time updates and beautiful visualizations

initial_prompt: |
  You are building a modern, responsive dashboard application that provides users with comprehensive data visualization and management capabilities. Multiple agents will collaborate on different aspects of the dashboard.
  
  ## CRITICAL: Multi-Agent Coordination Protocol

  ### Before Starting ANY Work:

  **Important**: You are part of a coordinated multi-agent system using SQLite-based coordination. The system automatically manages work claims, conflict resolution, and inter-agent communication through the CoordinationManager.

  1. **Agent Registration Process:**
     - Your agent is automatically registered with a unique UID and numeric ID
     - Agent status is tracked in the `agent_registry` table
     - Your capabilities and metrics are recorded for coordination
     - No manual registration is required

  2. **Work Claiming System:**
     - Use the CoordinationManager to claim work on specific files
     - Claims are stored in SQLite `work_claims` table, not JSON files
     - The system automatically detects conflicts and prevents overlapping work
     - Stale claims are auto-released after 2 hours (not 1 hour)

  3. **Coordination Database Structure:**
     ```
     SQLite Database (xenosync.db):
     ├── work_claims          # Active work claims with file locks
     ├── agent_registry       # Agent status and capabilities  
     ├── agent_messages       # Inter-agent communication
     ├── completed_work       # Log of completed tasks
     └── sessions            # Session metadata
     ```

  ### Work Coordination Workflow:

  #### Step 1: Check for Available Work
  1. The system automatically queries active claims to prevent conflicts
  2. Available work is distributed based on agent capabilities and current workload
  3. Conflicts are resolved automatically - no manual checking required

  #### Step 2: Claim Work Through CoordinationManager
  ```python
  # System automatically handles this - agents don't need to manually implement
  claim_id = coordination_manager.claim_work(
      agent_uid=your_agent_uid,
      session_id=current_session_id, 
      files=["list", "of", "files", "to", "modify"],
      description="Description of work being performed",
      metadata={"estimated_duration": "minutes", "priority": "high"}
  )
  ```

  #### Step 3: Work Status Management
  - **Status Values**: Use WorkStatus enum values:
    - `CLAIMED`: Work has been claimed but not started
    - `IN_PROGRESS`: Actively working on the claim
    - `COMPLETED`: Work finished successfully
    - `FAILED`: Work encountered errors
    - `RELEASED`: Work was abandoned or reassigned

  #### Step 4: Update Work Progress
  - Update your work status automatically through the system
  - Status updates are tracked with timestamps
  - Other agents are notified of progress through the messaging system

  #### Step 5: Inter-Agent Communication
  - Send messages to coordinate with other agents:
    - Broadcast messages to all agents
    - Direct messages to specific agents
    - Message types: work_claim, work_release, status_update, help_request
  - Messages are stored in `agent_messages` table

  #### Step 6: Complete Work
  1. Update work status to `COMPLETED` or `FAILED`
  2. System logs completion in `completed_work` table with:
     - Files modified
     - Duration
     - Success status
     - Any error messages
  3. Work claims are automatically released

  ### Conflict Resolution:
  - **Automatic Detection**: System detects file conflicts before allowing work claims
  - **Stale Claim Cleanup**: Claims older than 2 hours are automatically released
  - **Load Balancing**: Work is distributed based on current agent workloads
  - **Priority System**: High-priority work can preempt lower-priority tasks

  ### Key Coordination Principles:
  1. **Trust the System**: The CoordinationManager handles most coordination automatically
  2. **Communicate Actively**: Use the messaging system to coordinate complex work
  3. **Update Status Frequently**: Keep your work status current for effective coordination
  4. **Respect Claims**: Never work on files claimed by other agents
  5. **Handle Failures Gracefully**: Update status to FAILED and release claims when encountering issues

  **Remember: We are working as a coordinated hive mind through the SQLite-based coordination system. The database handles conflict resolution, work distribution, and communication automatically. Stay organized, trust the system, and focus on your assigned work while the coordination layer manages the complex multi-agent orchestration.**
  
  Dashboard Features:
  - Modular widget-based architecture
  - Real-time data updates
  - Interactive charts and graphs
  - Responsive grid layout
  - User customization options
  - Data export capabilities
  - Advanced filtering and search
  - Role-based views
  
  Technology Stack:
  - React/Vue/Angular with TypeScript
  - State management (Redux/Vuex/NgRx)
  - Chart libraries (D3.js, Chart.js, Recharts)
  - WebSocket for real-time updates
  - CSS-in-JS or Tailwind CSS
  
  Each agent should focus on different dashboard sections while maintaining consistent design patterns.

metadata:
  recommended_agents: 4
  recommended_mode: parallel
  estimated_time: 30
  difficulty: intermediate
  tags: [dashboard, frontend, visualization, react, real-time]

steps:
  - content: Design dashboard architecture
    description: |
      Plan the dashboard structure:
      - Define widget architecture
      - Design component hierarchy
      - Plan state management structure
      - Design data flow patterns
      - Create responsive grid system
      - Plan routing structure
      - Design permission system
      - Create design system documentation
    
  - content: Set up project and dependencies
    description: |
      Initialize dashboard project:
      - Create React/Vue/Angular app
      - Configure TypeScript
      - Set up state management
      - Install UI component library
      - Configure chart libraries
      - Set up CSS framework
      - Configure build tools
      - Set up testing framework
    
  - content: Build core layout components
    description: |
      Create foundational UI:
      - Main dashboard container
      - Responsive sidebar navigation
      - Header with user menu
      - Footer with status info
      - Breadcrumb navigation
      - Page layouts templates
      - Loading skeletons
      - Error boundaries
    
  - content: Create widget system
    description: |
      Build modular widgets:
      - Base widget component
      - Widget header with actions
      - Widget configuration
      - Drag-and-drop support
      - Resize functionality
      - Full-screen mode
      - Widget refresh controls
      - Widget state persistence
    
  - content: Implement data visualization widgets
    description: |
      Build chart components:
      - Line charts for trends
      - Bar charts for comparisons
      - Pie/donut charts
      - Area charts
      - Scatter plots
      - Heat maps
      - Gauge charts
      - Sparklines
    
  - content: Create KPI and metric widgets
    description: |
      Build metric displays:
      - KPI cards with trends
      - Progress indicators
      - Comparison metrics
      - Goal tracking widgets
      - Performance scores
      - Status indicators
      - Alert badges
      - Mini charts in cards
    
  - content: Build data table widget
    description: |
      Create advanced tables:
      - Sortable columns
      - Column filtering
      - Pagination
      - Row selection
      - Inline editing
      - Column resizing
      - Export functionality
      - Virtual scrolling
    
  - content: Implement real-time updates
    description: |
      Add live data features:
      - WebSocket connection
      - Real-time data streaming
      - Auto-refresh intervals
      - Push notifications
      - Live activity feed
      - Real-time collaboration
      - Optimistic UI updates
      - Connection status indicator
    
  - content: Create filter and search system
    description: |
      Build data filtering:
      - Global search bar
      - Advanced filter panel
      - Date range picker
      - Multi-select filters
      - Saved filter presets
      - Filter tags display
      - Clear all filters
      - URL-based filtering
    
  - content: Build user customization
    description: |
      Add personalization:
      - Widget arrangement saving
      - Theme customization
      - Dashboard templates
      - Favorite dashboards
      - Custom color schemes
      - Widget visibility toggle
      - Default view settings
      - Personal shortcuts
    
  - content: Implement data management
    description: |
      Handle data operations:
      - CRUD operations UI
      - Bulk actions support
      - Import/export data
      - Data validation
      - Undo/redo functionality
      - Audit trail display
      - Version history
      - Conflict resolution
    
  - content: Add interactive features
    description: |
      Enhance interactivity:
      - Drill-down navigation
      - Cross-widget filtering
      - Tooltip information
      - Context menus
      - Keyboard shortcuts
      - Command palette
      - Quick actions menu
      - Gesture support
    
  - content: Create notification system
    description: |
      Build alerts and notices:
      - Toast notifications
      - Alert center
      - Push notifications
      - Email preferences
      - Notification history
      - Priority levels
      - Action buttons
      - Snooze functionality
    
  - content: Implement responsive design
    description: |
      Optimize for all devices:
      - Mobile-first approach
      - Tablet optimizations
      - Touch interactions
      - Responsive charts
      - Mobile navigation
      - Adaptive layouts
      - Performance optimization
      - Offline support
    
  - content: Add reporting features
    description: |
      Build report generation:
      - Report builder interface
      - Scheduled reports
      - PDF generation
      - Excel export
      - Email reports
      - Report templates
      - Custom branding
      - Share reports
    
  - content: Implement access control
    description: |
      Add security features:
      - Role-based dashboards
      - Widget permissions
      - Data access control
      - Feature flags
      - Audit logging
      - Session management
      - Secure data handling
      - API key management
    
  - content: Create help and onboarding
    description: |
      Build user assistance:
      - Interactive tour
      - Contextual help
      - Documentation links
      - Video tutorials
      - Tooltips
      - FAQ section
      - Feedback widget
      - Support chat
    
  - content: Test and optimize
    description: |
      Ensure quality:
      - Component unit tests
      - Integration tests
      - E2E test scenarios
      - Performance testing
      - Accessibility audit
      - Cross-browser testing
      - Load testing
      - Security review