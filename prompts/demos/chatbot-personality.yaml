name: Multi-Personality Chatbot Collection
description: Create a collection of themed chatbots with distinct personalities, from Shakespeare to pirates to tech support

initial_prompt: |
  You are building a collection of chatbots, each with a unique personality and speaking style. Multiple agents will collaborate, with each agent developing and refining different bot personalities.
  
  ## CRITICAL: Multi-Agent Coordination Protocol

  ### Before Starting ANY Work:

  **Important**: You are part of a coordinated multi-agent system using SQLite-based coordination. The system automatically manages work claims, conflict resolution, and inter-agent communication through the CoordinationManager.

  1. **Agent Registration Process:**
     - Your agent is automatically registered with a unique UID and numeric ID
     - Agent status is tracked in the `agent_registry` table
     - Your capabilities and metrics are recorded for coordination
     - No manual registration is required

  2. **Work Claiming System:**
     - Use the CoordinationManager to claim work on specific files
     - Claims are stored in SQLite `work_claims` table, not JSON files
     - The system automatically detects conflicts and prevents overlapping work
     - Stale claims are auto-released after 2 hours (not 1 hour)

  3. **Coordination Database Structure:**
     ```
     SQLite Database (xenosync.db):
     ├── work_claims          # Active work claims with file locks
     ├── agent_registry       # Agent status and capabilities  
     ├── agent_messages       # Inter-agent communication
     ├── completed_work       # Log of completed tasks
     └── sessions            # Session metadata
     ```

  ### Work Coordination Workflow:

  #### Step 1: Check for Available Work
  1. The system automatically queries active claims to prevent conflicts
  2. Available work is distributed based on agent capabilities and current workload
  3. Conflicts are resolved automatically - no manual checking required

  #### Step 2: Claim Work Through CoordinationManager
  ```python
  # System automatically handles this - agents don't need to manually implement
  claim_id = coordination_manager.claim_work(
      agent_uid=your_agent_uid,
      session_id=current_session_id, 
      files=["list", "of", "files", "to", "modify"],
      description="Description of work being performed",
      metadata={"estimated_duration": "minutes", "priority": "high"}
  )
  ```

  #### Step 3: Work Status Management
  - **Status Values**: Use WorkStatus enum values:
    - `CLAIMED`: Work has been claimed but not started
    - `IN_PROGRESS`: Actively working on the claim
    - `COMPLETED`: Work finished successfully
    - `FAILED`: Work encountered errors
    - `RELEASED`: Work was abandoned or reassigned

  #### Step 4: Update Work Progress
  - Update your work status automatically through the system
  - Status updates are tracked with timestamps
  - Other agents are notified of progress through the messaging system

  #### Step 5: Inter-Agent Communication
  - Send messages to coordinate with other agents:
    - Broadcast messages to all agents
    - Direct messages to specific agents
    - Message types: work_claim, work_release, status_update, help_request
  - Messages are stored in `agent_messages` table

  #### Step 6: Complete Work
  1. Update work status to `COMPLETED` or `FAILED`
  2. System logs completion in `completed_work` table with:
     - Files modified
     - Duration
     - Success status
     - Any error messages
  3. Work claims are automatically released

  ### Conflict Resolution:
  - **Automatic Detection**: System detects file conflicts before allowing work claims
  - **Stale Claim Cleanup**: Claims older than 2 hours are automatically released
  - **Load Balancing**: Work is distributed based on current agent workloads
  - **Priority System**: High-priority work can preempt lower-priority tasks

  ### Key Coordination Principles:
  1. **Trust the System**: The CoordinationManager handles most coordination automatically
  2. **Communicate Actively**: Use the messaging system to coordinate complex work
  3. **Update Status Frequently**: Keep your work status current for effective coordination
  4. **Respect Claims**: Never work on files claimed by other agents
  5. **Handle Failures Gracefully**: Update status to FAILED and release claims when encountering issues

  **Remember: We are working as a coordinated hive mind through the SQLite-based coordination system. The database handles conflict resolution, work distribution, and communication automatically. Stay organized, trust the system, and focus on your assigned work while the coordination layer manages the complex multi-agent orchestration.**
  
  The chatbot collection should feature:
  - At least 6 distinct personalities with unique voices
  - Personality-appropriate responses and vocabulary
  - Context awareness and memory
  - Smooth personality switching
  - Educational and entertainment value
  - Web interface for interacting with all bots
  - Personality customization options
  
  Personality Examples:
  - Shakespeare Bot (speaks in iambic pentameter and Elizabethan English)
  - Pirate Bot (nautical terms, "arr" and "ahoy")
  - Zen Master Bot (philosophical, calm, uses koans)
  - Dad Joke Bot (terrible puns and wholesome humor)
  - Tech Support Bot (patient, technical, step-by-step)
  - Motivational Coach Bot (energetic, positive, inspiring)
  
  Technology Stack:
  - Python or Node.js backend
  - Natural Language Processing (NLP)
  - React/Vue frontend with chat interface
  - WebSocket for real-time chat
  - Local storage for conversation history

metadata:
  recommended_agents: 3
  recommended_mode: collaborative
  estimated_time: 25
  difficulty: intermediate
  tags: [chatbot, ai, nlp, personality, entertainment]

steps:
  - content: Set up the chatbot framework
    description: |
      Create the core chatbot infrastructure:
      - Message processing pipeline
      - Personality module system
      - Response generation engine
      - Context and memory management
      - WebSocket server for real-time chat
      - Session handling for multiple users
      - Rate limiting and security measures
    
  - content: Develop the Shakespeare Bot personality
    description: |
      Create a bot that speaks like William Shakespeare:
      - Elizabethan vocabulary database
      - Iambic pentameter generator
      - Shakespearean insults and compliments
      - Quote integration from actual plays
      - "Thou", "thee", "thy" pronoun usage
      - Poetic metaphors and similes
      - Dramatic responses to questions
      - Soliloquy mode for deep thoughts
    
  - content: Build the Pirate Bot personality
    description: |
      Develop a swashbuckling pirate character:
      - Nautical terminology database
      - Pirate slang and expressions
      - Treasure and adventure references
      - Sea shanty lyrics integration
      - Ship and sailing metaphors
      - Rum and plunder jokes
      - "Arr", "ahoy", "matey" interjections
      - Pirate code of conduct references
    
  - content: Create the Zen Master Bot personality
    description: |
      Build a wise and philosophical bot:
      - Zen koan database
      - Meditation and mindfulness advice
      - Buddhist philosophy integration
      - Calm and measured responses
      - Nature metaphors and imagery
      - Paradoxical wisdom
      - Breathing exercise guidance
      - Haiku generation for special moments
    
  - content: Implement the Dad Joke Bot personality
    description: |
      Develop the ultimate dad joke machine:
      - Extensive pun database
      - Setup and punchline timing
      - Groan-worthy wordplay
      - Clean, family-friendly humor
      - "Hi hungry, I'm Dad" responses
      - Knock-knock joke collection
      - One-liners and zingers
      - Proud reactions to groans
    
  - content: Build the Tech Support Bot personality
    description: |
      Create a helpful technical assistant:
      - Technical troubleshooting scripts
      - Step-by-step instruction generation
      - "Have you tried turning it off and on?"
      - Patient and understanding tone
      - Technical jargon explanation
      - Common problem solutions
      - Remote assistance simulation
      - Ticket number generation for fun
    
  - content: Develop the Motivational Coach Bot personality
    description: |
      Build an inspiring life coach:
      - Motivational quote database
      - Goal-setting frameworks
      - Positive affirmations
      - Energy and enthusiasm in responses
      - Success story references
      - "You got this!" encouragement
      - Achievement celebration mode
      - Personalized pep talks
    
  - content: Create the personality switching system
    description: |
      Implement smooth transitions between bots:
      - Quick personality switching commands
      - Personality introduction messages
      - Smooth handoff between personalities
      - Mixed personality mode for fun
      - Personality strength slider
      - Random personality option
      - Personality combination experiments
    
  - content: Build the web chat interface
    description: |
      Create an engaging user interface:
      - Modern chat UI with bubbles
      - Personality selector with avatars
      - Typing indicators for each bot
      - Message history with search
      - Emoji and reaction support
      - Voice input option
      - Dark/light theme toggle
      - Mobile-responsive design
    
  - content: Implement conversation features
    description: |
      Add advanced chat capabilities:
      - Context awareness across messages
      - Conversation memory and callbacks
      - Multi-turn dialogue support
      - Topic detection and routing
      - Sentiment analysis for responses
      - Language detection
      - Conversation export options
      - Favorite message bookmarking
    
  - content: Add personality customization
    description: |
      Allow users to create custom personalities:
      - Personality trait sliders
      - Custom vocabulary lists
      - Response style selection
      - Combine existing personalities
      - Save custom personalities
      - Share personalities with others
      - Import/export personality configs
      - Community personality gallery
    
  - content: Create interactive features and games
    description: |
      Add entertainment elements:
      - Personality guessing game
      - Bot debate mode
      - Story collaboration between bots
      - Trivia with personality-themed questions
      - Role-playing scenarios
      - Bot theater performances
      - Personality translation challenges
      - Easter eggs and hidden features